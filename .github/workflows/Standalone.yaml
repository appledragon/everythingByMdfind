name: Build Standalone Application

on:
  # Manual trigger
  workflow_dispatch:

# Key: Give GITHUB_TOKEN write permissions (contents: write), otherwise unable to create releases
permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      # 1. Check out repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up Python 3.9
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          # Install librsvg for SVG conversion
          brew install librsvg

      # 4. Create app icon from SVG
      - name: Create app icon from SVG
        run: |
          # Create different sizes of PNG
          rsvg-convert -w 16 -h 16 icon.svg -o icon_16x16.png
          rsvg-convert -w 32 -h 32 icon.svg -o icon_32x32.png
          rsvg-convert -w 64 -h 64 icon.svg -o icon_64x64.png
          rsvg-convert -w 128 -h 128 icon.svg -o icon_128x128.png
          rsvg-convert -w 256 -h 256 icon.svg -o icon_256x256.png
          rsvg-convert -w 512 -h 512 icon.svg -o icon_512x512.png
          rsvg-convert -w 1024 -h 1024 icon.svg -o icon_1024x1024.png
          
          # Create iconset directory structure
          mkdir icon.iconset
          cp icon_16x16.png icon.iconset/icon_16x16.png
          cp icon_32x32.png icon.iconset/icon_16x16@2x.png
          cp icon_32x32.png icon.iconset/icon_32x32.png
          cp icon_64x64.png icon.iconset/icon_32x32@2x.png
          cp icon_128x128.png icon.iconset/icon_128x128.png
          cp icon_256x256.png icon.iconset/icon_128x128@2x.png
          cp icon_256x256.png icon.iconset/icon_256x256.png
          cp icon_512x512.png icon.iconset/icon_256x256@2x.png
          cp icon_512x512.png icon.iconset/icon_512x512.png
          cp icon_1024x1024.png icon.iconset/icon_512x512@2x.png
          
          # Use iconutil to create .icns file
          iconutil -c icns icon.iconset
          
          # Verify icon file creation success
          ls -la icon.icns

      # 5. Build architecture-specific standalone application with PyInstaller
      - name: Build standalone application with PyInstaller (${{ matrix.arch }})
        run: |
          # Set architecture-specific target
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            TARGET_ARCH="arm64"
            ARCH_SUFFIX="arm64"
          else
            TARGET_ARCH="x86_64"
            ARCH_SUFFIX="x86_64"
          fi
          
          # Build with PyInstaller for specific architecture
          pyinstaller --onefile --windowed --noconsole \
            --icon=icon.icns \
            --name="Everything-${ARCH_SUFFIX}" \
            --target-arch=$TARGET_ARCH \
            --add-data="LICENSE.md:." \
            --add-data="README.md:." \
            everything.py
          
          # Create archive with architecture-specific name
          cd dist
          zip -r "../everything-${ARCH_SUFFIX}.zip" "Everything-${ARCH_SUFFIX}"

      # 6. Upload architecture-specific build artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: everything-${{ matrix.arch }}
          path: everything-${{ matrix.arch }}.zip

  create_and_upload_release:
    needs: build_and_release
    runs-on: macos-latest
    steps:
      # 1. Check out repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Download all architecture-specific build artifacts
      - name: Download ARM64 build artifact
        uses: actions/download-artifact@v4
        with:
          name: everything-arm64
          path: ./artifacts/

      - name: Download x86_64 build artifact
        uses: actions/download-artifact@v4
        with:
          name: everything-x86_64
          path: ./artifacts/

      # 3. Create GitHub Release with both architecture builds
      - name: Create GitHub release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: 'v1.3.3-${{ github.run_number }}'
          name: 'Everything by mdfind v1.3.3 - ARM64 & x86_64'
          body: |
            ## Everything by mdfind v1.3.3
            
            This release provides separate builds for different architectures:
            - **everything-arm64.zip**: For Apple Silicon Macs (M1, M2, M3 chips)
            - **everything-x86_64.zip**: For Intel-based Macs
            
            ### Features
            - Lightning-fast file search using macOS Spotlight
            - Support for both filename and content search
            - Advanced filtering options
            - Built-in file preview
            - Multi-tab search interface
            - Batch operations support
            
            Choose the appropriate version for your Mac's architecture.
          files: |
            ./artifacts/everything-arm64.zip
            ./artifacts/everything-x86_64.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
